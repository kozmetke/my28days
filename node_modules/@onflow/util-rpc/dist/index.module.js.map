{"version":3,"file":"index.module.js","sources":["../src/rpc-error.ts","../src/rpc-client.ts"],"sourcesContent":["export enum RpcErrorCode {\n  INVALID_REQUEST = -32600,\n  METHOD_NOT_FOUND = -32601,\n  INVALID_PARAMS = -32602,\n  INTERNAL_ERROR = -32603,\n  PARSE_ERROR = -32700,\n}\n\nexport class RpcError extends Error {\n  constructor(\n    public code: RpcErrorCode,\n    public message: string,\n    public data?: any\n  ) {\n    super(message)\n  }\n}\n","import {RpcMessage, RpcNotificationMessage, RpcRequestMessage} from \"./messages\"\nimport {RpcError, RpcErrorCode} from \"./rpc-error\"\n\nexport type RpcRequest<P, R> = {\n  type: \"request\"\n  params: P\n  result: R\n}\n\nexport type RpcNotification<P> = {\n  type: \"notification\"\n  params: P\n}\n\nenum ReservedRpcMethods {\n  HELLO = \"rpc_hello\",\n}\n\ntype RequestHandler<T = any> = (params: T) => any\ntype NotificationHandler<T = any> = (params: T) => void\n\ntype PeerInfo = {\n  requests: string[]\n  notifications: string[]\n}\n\nexport class RpcClient<\n  PeerRequests extends Record<string, RpcRequest<any, any>>,\n  PeerNotifications extends Record<string, RpcNotification<any>>,\n> {\n  private id = 0\n\n  private setSend: (send: (msg: RpcMessage) => void) => void = () => {}\n  private _send: Promise<(msg: RpcMessage) => void> = new Promise(resolve => {\n    this.setSend = resolve\n  })\n\n  private resolvePeerInfo!: (info: PeerInfo) => void\n  private rejectPeerInfo!: (error: Error) => void\n  private peerInfo: Promise<PeerInfo> = new Promise((resolve, reject) => {\n    this.resolvePeerInfo = resolve\n    this.rejectPeerInfo = reject\n  })\n\n  private enabledNotifications: string[] = []\n  private requestHandlers: Record<string, RequestHandler> = {} as any\n  private subscriptions: Record<string, Set<NotificationHandler>> = {} as any\n  private messageListeners: ((msg: any) => void)[] = []\n\n  constructor({notifications}: {notifications?: string[]}) {\n    this.enabledNotifications = notifications || []\n    this.on(ReservedRpcMethods.HELLO, (info: PeerInfo) => {\n      this.resolvePeerInfo(info)\n      return this.ownInfo()\n    })\n  }\n\n  connect({send}: {send: (msg: RpcMessage) => void}) {\n    this.setSend(send)\n    this.requestWithoutConnection(ReservedRpcMethods.HELLO, this.ownInfo())\n      .then(info => {\n        this.resolvePeerInfo(info)\n      })\n      .catch(this.rejectPeerInfo)\n  }\n\n  private ownInfo(): PeerInfo {\n    return {\n      requests: Object.keys(this.requestHandlers),\n      notifications: this.enabledNotifications,\n    }\n  }\n\n  private async send(msg: RpcMessage) {\n    return (await this._send)(msg)\n  }\n\n  receive(msg: RpcMessage) {\n    if (msg?.jsonrpc !== \"2.0\") {\n      return\n    }\n\n    if (\"method\" in msg) {\n      if (\"id\" in msg) {\n        this.handleRequest(msg)\n      } else {\n        this.handleNotification(msg)\n      }\n    }\n\n    this.messageListeners.forEach(listener => listener(msg))\n  }\n\n  private async handleRequest(msg: RpcRequestMessage) {\n    const handler = this.requestHandlers[msg.method]\n    if (handler) {\n      try {\n        const result = await handler(msg.params)\n        this.send({\n          jsonrpc: \"2.0\",\n          id: msg.id,\n          result,\n        })\n      } catch (error: any) {\n        if (error instanceof RpcError) {\n          this.send({\n            jsonrpc: \"2.0\",\n            id: msg.id,\n            error: {\n              code: error.code,\n              message: error.message,\n              data: error.data,\n            },\n          })\n        } else {\n          this.send({\n            jsonrpc: \"2.0\",\n            id: msg.id,\n            error: {\n              code: RpcErrorCode.INTERNAL_ERROR,\n              message: error?.message,\n            },\n          })\n        }\n      }\n    } else {\n      this.send({\n        jsonrpc: \"2.0\",\n        id: msg.id,\n        error: {\n          code: RpcErrorCode.METHOD_NOT_FOUND,\n          message: `Method not found: ${msg.method}`,\n        },\n      })\n    }\n  }\n\n  private handleNotification(msg: RpcNotificationMessage) {\n    if (this.subscriptions[msg.method]) {\n      this.subscriptions[msg.method].forEach(handler => handler(msg.params))\n    }\n  }\n\n  private onMessage(listener: (msg: any) => void) {\n    this.messageListeners.push(listener)\n    return () => {\n      this.messageListeners = this.messageListeners.filter(l => l !== listener)\n    }\n  }\n\n  async notify<R extends keyof PeerNotifications & string>(\n    method: R,\n    params: PeerNotifications[R][\"params\"]\n  ) {\n    await this.onceConnected()\n\n    this.send({\n      jsonrpc: \"2.0\",\n      method,\n      params,\n    })\n  }\n\n  async request<R extends keyof PeerRequests & string>(\n    method: R,\n    params: PeerRequests[R][\"params\"]\n  ): Promise<PeerRequests[R][\"result\"]> {\n    await this.onceConnected()\n    return this.requestWithoutConnection(method, params)\n  }\n\n  private async requestWithoutConnection<R extends keyof PeerRequests & string>(\n    method: R,\n    params: PeerRequests[R][\"params\"]\n  ): Promise<PeerRequests[R][\"result\"]> {\n    const id = this.id++\n\n    let unsub = () => {}\n    const result = new Promise<PeerRequests[R][\"result\"]>((resolve, reject) => {\n      unsub = this.onMessage(msg => {\n        if (msg.id === id && (\"result\" in msg || \"error\" in msg)) {\n          if (msg.error) {\n            const rpcError = new RpcError(\n              msg.error.code,\n              msg.error.message,\n              msg.error.data\n            )\n            reject(rpcError)\n          }\n          resolve(msg.result)\n        }\n      })\n    }).finally(unsub)\n\n    this.send({\n      jsonrpc: \"2.0\",\n      method,\n      params,\n      id,\n    })\n\n    return result\n  }\n\n  on(method: string, handler: RequestHandler) {\n    this.requestHandlers[method] = handler\n  }\n\n  subscribe<R extends string>(method: R, handler: RequestHandler<any>) {\n    this.subscriptions[method] = this.subscriptions[method] || new Set()\n    this.subscriptions[method].add(handler)\n  }\n\n  unsubscribe<R extends string>(method: R, handler: RequestHandler<any>) {\n    this.subscriptions[method]?.delete(handler)\n  }\n\n  async onceConnected() {\n    return this.peerInfo.then(() => {})\n  }\n\n  async getAvailableRequests() {\n    return this.peerInfo.then(info => info.requests)\n  }\n\n  async getAvailableNotifications() {\n    return this.peerInfo.then(info => info.notifications)\n  }\n}\n"],"names":["RpcErrorCode","RpcError","Error","constructor","code","message","data","ReservedRpcMethods","RpcClient","_ref","notifications","_defineProperty","Promise","resolve","setSend","reject","resolvePeerInfo","rejectPeerInfo","enabledNotifications","on","HELLO","info","ownInfo","connect","_ref2","send","requestWithoutConnection","then","catch","requests","Object","keys","requestHandlers","msg","_send","receive","jsonrpc","handleRequest","handleNotification","messageListeners","forEach","listener","handler","method","result","params","id","error","INTERNAL_ERROR","METHOD_NOT_FOUND","subscriptions","onMessage","push","filter","l","notify","onceConnected","request","unsub","rpcError","finally","subscribe","Set","add","unsubscribe","delete","peerInfo","getAvailableRequests","getAvailableNotifications"],"mappings":"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"}