export function isFn(d: any): boolean;
export type CurrentUser = import("@onflow/typedefs").CurrentUser;
export type CompositeSignature = import("@onflow/typedefs").CompositeSignature;
/**
 * @description
 * Creates the Current User object
 *
 * @param {object} opts - Configuration Options
 * @param {string} opts.platform - Platform
 * @param {object} [opts.discovery] - Discovery Config Resolver for additional configuration
 */
export function getCurrentUser({ platform, discovery }: {
    platform: string;
    discovery?: object | undefined;
}): {
    (): {
        authenticate: ({ service, redir }?: {
            service?: object | undefined;
            redir?: boolean | undefined;
        } | undefined) => Promise<any>;
        unauthenticate: typeof unauthenticate;
        authorization: Promise<object>;
        signUserMessage: (arg0: string) => Promise<CompositeSignature[]>;
        subscribe: typeof subscribe;
        snapshot: typeof snapshot;
        resolveArgument: Promise<Function>;
    };
    authenticate: ({ service, redir }?: {
        service?: object | undefined;
        redir?: boolean | undefined;
    } | undefined) => Promise<any>;
    unauthenticate: typeof unauthenticate;
    authorization: Promise<object>;
    signUserMessage: (arg0: string) => Promise<CompositeSignature[]>;
    subscribe: typeof subscribe;
    snapshot: typeof snapshot;
    resolveArgument: Promise<Function>;
};
/**
 * @description - Unauthenticate a user
 * @returns {void}
 */
declare function unauthenticate(): void;
/**
 * @description
 * The callback passed to subscribe will be called when the user authenticates and un-authenticates, making it easy to update the UI accordingly.
 *
 * @param {Function} callback - Callback function
 * @returns {Function} - Unsubscribe function
 */
declare function subscribe(callback: Function): Function;
/**
 * @description - Gets the current user
 * @returns {Promise<CurrentUser>} - User object
 */
declare function snapshot(): Promise<CurrentUser>;
export {};
